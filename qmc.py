#!/usr/bin/env python
import os
import re
import subprocess
import sys
import generate_mac
import netifaces
from netifaces import interfaces
from colorama import Fore, Back
import optparse

# GLOBALS
f_blue = Fore.BLUE
f_white = Fore.WHITE
f_yellow = Fore.YELLOW
f_red = Fore.RED
f_green = Fore.GREEN
f_cyan = Fore.CYAN
rst = Fore.RESET
interface = None
mac = None

# styles
RST = f'{Back.RESET}{rst}'
ERROR = f'\n{Fore.BLACK}{Back.LIGHTRED_EX} [ERROR]: {RST}'
DEBUG = f'\n{Fore.BLACK}{Back.LIGHTYELLOW_EX} [DEBUG]: {RST}'
INPUT = f'\n{Fore.BLACK}{Back.LIGHTGREEN_EX} [INPUT]: {RST}'
SUCCESS = f'\n{Fore.BLACK}{Back.LIGHTGREEN_EX} [SUCCESS]: {RST}'
ACTION = f'\n{Fore.BLACK}{Back.LIGHTBLUE_EX} '
RESULTS = f'\n{Fore.BLACK}{Back.LIGHTCYAN_EX} [RESULTS]: {RST}'
TESTING = f'\n{Fore.BLACK}{Back.LIGHTYELLOW_EX} [TESTING]: {RST}'


def welcome():
    print(f_red + f"""


    ████████▄     ▄▄▄▄███▄▄▄▄    ▄████████ 
    ███    ███  ▄██▀▀▀███▀▀▀██▄ ███    ███ 
    ███    ███  ███   ███   ███ ███    █▀  
    ███    ███  ███   ███   ███ ███        
    ███    ███  ███   ███   ███ ███        
    ███    ███  ███   ███   ███ ███    █▄  
    ███  ▀ ███  ███   ███   ███ ███    ███ 
     ▀██████▀▄█  ▀█   ███   █▀  ████████▀  

     {f_green}▀█{rst} Quick MAC Changer by {f_yellow}@tzero86 {f_green}█▀{rst}                                 
          """ + Fore.RESET)


# to handle commandline arguments and help
def handle_commandline():
    welcome()
    check_root()
    parser = optparse.OptionParser()
    # we add the possible commandline options
    parser.add_option('-l', '--list', dest='interfaces_list', action='store_true', help='Shows a list of the currently '
                                                                                        'available network interfaces.')
    parser.add_option('-i', '--interface', dest='net_interface', help='Interface to change MAC Address to.')
    parser.add_option('-m', '--mac', dest='mac_address', help='New MAC Address to be set in format xx:xx:xx:xx:xx. '
                                                              'Leave unset to get it autogenerated.')
    (options, arguments) = parser.parse_args()
    if options.interfaces_list and not options.net_interface:
        list_interfaces()
        bye()
    else:
        try:
            print(
                f'{DEBUG} Commandline Parameters Recv: Interface: {rst}'
                f'{f_cyan}{options.net_interface}{rst} - MAC: {f_cyan}{options.mac_address}{rst}')
            menu(options.net_interface, options.mac_address)
        except:
            # print(f'{f_yellow}[DEBUG ERROR] No OPTS detected!{rst}')
            menu(-1, -1)


# We generate a properly formatted random MAC Address using generate_mac module.
def menu(target, address):
    if target != -1 and address != -1:
        change_mac(target, address)
    else:
        while True:
            list_interfaces()
            target_interface = str(
                input(f"{INPUT} Enter the name of the interface or press CTRL+C to EXIT: "))
            if target_interface and target_interface.strip():
                new_address = str(input(f"{INPUT} Enter the MAC address or leave it blank to "
                                        f"generate one automatically: {RST}"))
                if new_address.strip() and re.match("[0-9a-f]{2}([-:]?)[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$",
                                                    new_address.lower()):
                    change_mac(target_interface, new_address)
                else:
                    print(
                        f'{ACTION}[GENERATE]: {RST} Generating a {f_cyan}random and properly formatted MAC '
                        f'address{rst} for you.')
                    try:
                        change_mac(target_interface, get_random_mac_address())
                    except:
                        print(f'{ERROR} You MUST specify a valid '
                              f'interface name like  -> {f_cyan}wlan0{rst} or {f_cyan}enp4s0{rst}')
                        menu(None, None)
                    break
            else:
                print(f'{ERROR} You MUST specify an interface, for example: '
                      f'wlan0 or enp4s0.{rst}')


# we need to list the network interfaces available in the system
def list_interfaces():
    print(f'{ACTION}[SCANNING]: {RST} Listing all available interfaces...{RST}')
    available_interfaces = interfaces()
    print(f"{RESULTS} Interfaces Found:{RST} {f_cyan}{available_interfaces}{RST}")


# it gets the current MAC address assigned to the interface
def get_current_mac_address(target_interface):
    mac_addr = netifaces.ifaddresses(target_interface)[netifaces.AF_LINK]
    print(
        f'{TESTING}\n- Interface:{f_cyan} {target_interface} {RST}\n- Current MAC: {f_cyan}{mac_addr[0]["addr"]}{RST}')
    return mac_addr


# generates a random properly formatted MAC Address
def get_random_mac_address():
    generated_mac = str(generate_mac.generate_mac.total_random())
    print(f'{RESULTS}{RST} New MAC Address generated: {f_cyan}{generated_mac}{RST}')
    return generated_mac


def check_root():
    # At least on Manjaro we need to run it with sudo for it to work.
    # I also had to install net-tools to have ifconfig working.
    if not os.geteuid() == 0:
        sys.exit(f"{ERROR} You MUST execute this script with Sudo/Root access!\n{RST}")


# we might need to make this more useful in the future
def check_mac_address_change(old, new):
    print(f'{TESTING} It seems the MAC address has been successfully updated.')
    return old != new


def change_mac(target_interface, new_address):
    old = get_current_mac_address(target_interface)
    print(
        f'{ACTION}[WORKING]: {RST} Setting a new MAC address. Interface:{f_cyan} {target_interface} {rst}'
        f'- New MAC Address:{f_cyan} {new_address} {rst}')
    # we call the subprocesses
    subprocess.call(['ifconfig', target_interface, 'down'])
    subprocess.call(['ifconfig', target_interface, 'hw', 'ether', new_address])
    subprocess.call(['ifconfig', target_interface, 'up'])
    new = get_current_mac_address(target_interface)
    if check_mac_address_change(old, new):
        print(
            f'\n{SUCCESS} New MAC address {f_cyan}{new_address}{RST} '
            f'has been assigned to the target interface {f_cyan}{target_interface}{rst}')
        bye()
    else:
        print(f"{ERROR} Something went wrong when trying to change the MAC. You'll have to try again, sorry."
              f"\n{RST}")
        handle_commandline()


def bye():
    print(f'{ACTION}[Bye Bye]: {RST} Thanks for using my shitty tool!{RST}\n')


if __name__ == "__main__":
    handle_commandline()
