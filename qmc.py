#!/usr/bin/env python
import os
import re
import subprocess
import sys
import generate_mac
import netifaces
from netifaces import interfaces, ifaddresses
from colorama import Fore, Back
import optparse

# GLOBALS
f_blue = Fore.BLUE
f_white = Fore.WHITE
f_yellow = Fore.YELLOW
f_red = Fore.RED
f_green = Fore.GREEN
f_cyan = Fore.CYAN
rst = Fore.RESET
interface = None
mac = None


def welcome():
    print(f_red + f"""


    ████████▄     ▄▄▄▄███▄▄▄▄    ▄████████ 
    ███    ███  ▄██▀▀▀███▀▀▀██▄ ███    ███ 
    ███    ███  ███   ███   ███ ███    █▀  
    ███    ███  ███   ███   ███ ███        
    ███    ███  ███   ███   ███ ███        
    ███    ███  ███   ███   ███ ███    █▄  
    ███  ▀ ███  ███   ███   ███ ███    ███ 
     ▀██████▀▄█  ▀█   ███   █▀  ████████▀  

     {f_green}▀█{rst} Quick MAC Changer by {f_yellow}@tzero86 {f_green}█▀{rst}                                 
          """ + Fore.RESET)


# to handle comandline arguments and help
def handle_comandline():
    welcome()
    check_root()
    parser = optparse.OptionParser()
    # we add the possible commandline options
    parser.add_option('-l', '--list', dest='interfaces_list',action='store_true', help='Shows a list of the currently '
                                                                                       'available network interfaces.')
    parser.add_option('-i', '--interface', dest='net_interface', help='Interface to change MAC Address to.')
    parser.add_option('-m', '--mac', dest='mac_address', help='New MAC Address to be set in format xx:xx:xx:xx:xx. '
                                                              'Leave unset to get it autogenerated.')
    (options, arguments) = parser.parse_args()
    if options.interfaces_list and not options.net_interface:
        list_interfaces()
        bye()
    else:
        try:
            print(f'{f_yellow}[DEBUG] Commandline Parameters Recv: Interface: {options.net_interface} - MAC: {options.mac_address}{rst}')
            menu(options.net_interface, options.mac_address)
        except:
            print(f'{f_yellow}[DEBUG ERROR] No OPTS detected!{rst}')
            menu(-1, -1)


# We generate a properly formatted random MAC Address using generate_mac module.
def menu(target, address):
    if target != -1 and address != -1:
        change_mac(target, address)
    else:
        while True:
            list_interfaces()
            target_interface = str(
                input(f"{f_green}[Select Interface]{rst} Enter the name of the interface or press "
                      "CTRL+C to EXIT: "))
            if target_interface and target_interface.strip():
                new_address = str(input(f"{f_green}[Input MAC Address]{rst} Enter the MAC address or leave it blank to "
                                        "generate one automatically: " + rst))
                if new_address.strip() and re.match("[0-9a-f]{2}([-:]?)[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$",
                                                    new_address.lower()):
                    change_mac(target_interface, new_address)
                else:
                    print(
                        f'{f_red}[ERROR] For some reason we did not like that MAC Address, generating a random one for '
                        f'you.{rst}')
                    try:
                        change_mac(target_interface, get_random_mac_address())
                    except:
                        print(f'{f_red}[ERROR] You MUST specify a valid interface name like  -> {f_cyan}wlan0{rst} '
                              f'or {f_cyan}enp4s0{rst}')
                        menu()
                    break
            else:
                print(f'{f_red}[ERROR] You MUST specify an interface, for example -> wlan0 or enp4s0.{rst}')


# we need to list the network interfaces available in the system
def list_interfaces():
    print(f'{f_green}[Interfaces Scan]{rst} Listing all available interfaces...{rst}')
    available_interfaces = interfaces()
    print(f"{f_green}[Interfaces Found] -> {f_cyan}{available_interfaces}{rst}")


# it gets the current MAC address assigned to the interface
def get_current_mac_address(target_interface):
    mac = netifaces.ifaddresses(target_interface)[netifaces.AF_LINK]
    print(
        f'{f_green}[Current MAC address]{rst} interface:{f_cyan} {target_interface} {rst}- MAC: '
        f'{f_cyan}{mac[0]["addr"]}{rst}')


# generates a random properly formatted MAC Address
def get_random_mac_address():
    return str(generate_mac.generate_mac.total_random())


def check_root():
    # At least on Manjaro we need to run it with sudo for it to work.
    # I also had to install net-tools to have ifconfig working.
    if not os.geteuid() == 0:
        sys.exit(f"{f_red}\n[ERROR] You Need to execute this script with Sudo/Root access!\n{rst}")


def change_mac(target_interface, new_address):
    get_current_mac_address(target_interface)
    print(
        f'{f_green}[Setting new MAC Address]{rst} Interface:{f_cyan} {target_interface} {rst}'
        f'- New MAC Address:{f_cyan} {new_address} {rst}')
    # we call the subprocesses
    subprocess.call(['ifconfig', target_interface, 'down'])
    subprocess.call(['ifconfig', target_interface, 'hw', 'ether', new_address])
    subprocess.call(['ifconfig', target_interface, 'up'])
    get_current_mac_address(target_interface)
    print(
        f'\n{Back.LIGHTGREEN_EX}{Fore.BLACK}[SUCCESS]{rst}{Back.RESET} New MAC address {new_address} has been assigned'
        f' to the target interface {target_interface}{rst}')
    bye()


def bye():
    print(f'\n{f_green}[Bye Bye]{f_red} and thanks for using my shitty tool!{rst}\n')


if __name__ == "__main__":
    handle_comandline()
